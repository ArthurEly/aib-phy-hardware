package aib3d

import scala.math.min
import org.json4s.JsonDSL._
import org.json4s.jackson.JsonMethods.{pretty, render}
import doodle.core._
import doodle.core.format._
import doodle.syntax.all._
import doodle.java2d._
import cats.effect.unsafe.implicits.global

import chisel3._

import chisel3.experimental.{BaseModule, DataMirror}
import org.chipsalliance.cde.config.Parameters

import aib3d.io._

/** Generate bump map collateral */
object GenCollateral {
  /** Generates a JSON file with the IO cell instance name and location,
    * core pin name and location, and other physical design constraints.
    */
  def toJSON(iocells: Seq[BaseModule with IOCellConnects])
    (implicit params: AIB3DParams): String = {
    pretty(render(("bump map" -> params.flatBumpMap.map{ b =>
      val io = iocells.find(_.forBump == b)
      ("bump_name" -> b.bumpName) ~
      ("core_sig" -> (if (b.coreSig.isDefined) Some(b.coreSig.get.fullName) else None)) ~
      ("iocell_path" -> (if (io.isDefined) Some(io.get.toTarget.toString) else None)) ~
      ("bump_x" -> b.location.get.x) ~
      ("bump_y" -> b.location.get.y) ~
      ("pin_x" -> (if (b.coreSig.isDefined) Some(b.coreSig.get.pinLocation.get.x) else None)) ~
      ("pin_y" -> (if (b.coreSig.isDefined) Some(b.coreSig.get.pinLocation.get.y) else None)) ~
      ("submod_idx" -> (if (b.submodIdx.isDefined) Some(b.submodIdx.get.linearIdx) else None))
    })))
  }

  /** Generates a JSON file consumable by the Hammer VLSI flow tool.
    * This is a different from the JSON file generated by toJSON.
    */
  def toHammerJSON(iocells: Seq[BaseModule with IOCellConnects])
    // TODO: support mismatched pitchH/pitchV (not yet supported by Hammer) - need gcd of them
    // TODO: TSV constraints
    (implicit params: AIB3DParams): String = {
    // Floating point precision
    def roundToNm(x: Double): Double = (x * 1000).round / 1000.0
    // Replace delimiters when generating Target strings
    def targetRepl(s: String): String = {
      val replMap = Map("~" -> "", "|" -> "/", ">" -> "/", "." -> "_")
      replMap.foldLeft(s)((k, v) => k.replace(v._1, v._2))
    }

    // Bumps
    val bumps =
      ("vlsi.inputs.bumps_mode" -> "manual") ~
      ("vlsi.inputs.bumps" ->
        ("x" -> params.bumpMap(0).length) ~
        ("y" -> params.bumpMap.length) ~
        ("pitch" -> params.gp.pitch) ~
        ("global_x_offset" -> (
          if (params.pinSide == "W") params.ip.bumpOffset else 0.0)) ~
        ("global_y_offset" -> (
          if (params.pinSide == "S") params.ip.bumpOffset else 0.0)) ~
        ("cell" -> params.ip.bumpCellName) ~
        ("assignments" -> params.flatBumpMap.map( b =>
          ("name" -> b.bumpName) ~
          // location is integer multiple of pitch, 1-indexed
          ("x" -> roundToNm(b.location.get.x / params.gp.pitch + 0.5).toInt) ~
          ("y" -> roundToNm(b.location.get.y / params.gp.pitch + 0.5).toInt)
        ))
      )

    // Pins
    val coreSigs = iocells.withFilter(_.forBump.coreSig.isDefined).map(_.forBump.coreSig.get)
    val sideMap = Map("N" -> "top", "S" -> "bottom", "E" -> "right", "W" -> "left")
    val pins =
      ("vlsi.inputs.pin_mode" -> "generated") ~
      ("vlsi.inputs.pin" ->
        ("generate_mode" -> "semi_auto") ~
        ("assignments" -> (coreSigs.map( c =>
          ("pins" -> s"*${c.fullName}") ~
          ("side" -> sideMap(params.pinSide)) ~
          ("layers" -> Seq(c.pinLayer.get)) ~
          ("location" -> Seq(roundToNm(c.pinLocation.get.x),
                             roundToNm(c.pinLocation.get.y)))
        ) ++ Seq(  // TODO: constrain within the edge
          ("pins" -> "*") ~
          ("side" -> sideMap(params.pinSide)) ~
          ("layers" -> params.ip.layerPitch.keys)
        )))
      )

    // Placements
    val topWidth = (params.bumpMap(0).length + 1) * params.gp.pitchH +
      (if (!params.isWide) params.ip.bumpOffset else 0.0)
    val topHeight = (params.bumpMap.length + 1) * params.gp.pitchV +
      (if (params.isWide) params.ip.bumpOffset else 0.0)
    val places =
      ("vlsi.inputs.placement_constraints" -> (Seq(
        ("path" -> "Patch") ~
        ("type" -> "toplevel") ~
        ("x" -> 0) ~
        ("y" -> 0) ~
        ("width" -> roundToNm(topWidth)) ~
        ("height" -> roundToNm(topHeight)) ~
        ("margins" ->
          ("left" -> 0) ~
          ("right" -> 0) ~
          ("top" -> 0) ~
          ("bottom" -> 0))
      ) ++ iocells.map( i =>
        // Replace Target delimiters with / for P&R
        // Fields depend on whether we are using blackboxes or models
        // TODO: breaks if IO cell beneath top hierarchy
        ("path" -> targetRepl(i.toTarget.toString)) ~
        ("type" -> (if (params.ip.blackBoxModels) "placement" else "hardmacro")) ~
        ("x" -> roundToNm(i.forBump.location.get.x - (
          if (params.ip.blackBoxModels) params.gp.pitchH / 2 else 0.0))) ~
        ("y" -> roundToNm(i.forBump.location.get.y - (
          if (params.ip.blackBoxModels) params.gp.pitchV / 2 else 0.0))) ~
        ("width" -> (if (params.ip.blackBoxModels) Some(params.gp.pitchH)
                     else None)) ~
        ("height" -> (if (params.ip.blackBoxModels) Some(params.gp.pitchV)
                      else None)) ~
        ("master" -> (if (params.ip.blackBoxModels) None
                      else Some(i.desiredName)))
        // TODO: top layer for halos
      ))) ~
      ("vlsi.inputs.placement_constraints_meta" -> "append")

    // SDC: clocks, delays, loads
    // Note: directions seem reversed (derived from bumps, not facing the core)
    val txClocks = coreSigs.collect{ case c if (
      DataMirror.checkTypeEquivalence(c.ioType, Clock()) &&
      DataMirror.specifiedDirectionOf(c.ioType) == SpecifiedDirection.Output)
      => ("clocks_" + c.fullName, None)}
    val rxClocks = iocells.filter(_.forBump.coreSig.isDefined).collect{ case i
      if {  // get clock output of IO cell itself
        val c = i.forBump.coreSig.get
        DataMirror.checkTypeEquivalence(c.ioType, Clock()) &&
        DataMirror.specifiedDirectionOf(c.ioType) == SpecifiedDirection.Input
      } => (i.forBump.coreSig.get.fullName,
          Some(targetRepl(i.io.rxData.toTarget.toString)))
    }
    val coreTxs = coreSigs.collect{ case c if (
      DataMirror.specifiedDirectionOf(c.ioType) == SpecifiedDirection.Output &&
      !DataMirror.checkTypeEquivalence(c.ioType, Clock())) => (c, "input")
    }
    val coreRxs = coreSigs.collect{ case c if (
      DataMirror.specifiedDirectionOf(c.ioType) == SpecifiedDirection.Input &&
      !DataMirror.checkTypeEquivalence(c.ioType, Clock())) => (c, "output")
    }
    // TODO: parameterize frequency and uncertainty
    val sdc =
      ("vlsi.inputs.clocks" -> (Seq(
        ("name" -> "clock") ~
        ("period" -> "1 ns") ~
        ("uncertainty" -> "0.1 ns")
      ) ++ (txClocks ++ rxClocks).map(c =>
        ("name" -> c._1) ~
        ("path" -> c._2) ~
        ("period" -> "250 ps") ~
        ("uncertainty" -> "25 ps")
      ))) ~
      ("vlsi.inputs.custom_sdc_constraints" -> Seq(
        // These are static bits
        "set_false_path -from [*ioCtrl*]",
        "set_false_path -from [*Faulty*]"  // OK even if no redundancy
      )) ~
      // TODO: this depends on the voltage-delay curve of the spec
      ("vlsi.inputs.delays" -> (coreTxs ++ coreRxs).map{ case (c, dir) =>
        ("name" -> c.fullName) ~
        ("clock" -> c.relatedClk.get) ~
        ("direction" -> dir) ~
        ("delay" -> "50 ps")
      }) ~
      // TODO: what's the actual load
      ("vlsi.inputs.default_output_load" -> "1 fF")
      // ("vlsi.inputs.output_loads" -> List("*", "1 fF"))
      // TODO: driver cell

    pretty(render(bumps merge pins merge places merge sdc))
  }

  /** Generates a CSV file that can be imported into a spreadsheet
    * Each cell corresponds to a bump. If the bump has a corresponding core signal,
    * it is printed in the cell as well.
    */
  def toCSV(implicit params: AIB3DParams): String = {
    "Signal <-> Bump\n"+
    // Reverse rows to account for spreadsheet vs. layout
    params.bumpMap.reverse.map{ case r => r.map{ case b =>
      val coreSig = if (b.coreSig.isDefined) b.coreSig.get.fullName + " <-> " else ""
      s"${coreSig}${b.bumpName}"
    }.mkString(", ")}.mkString("\n")
  }

  /** Generates a PNG + PDF file that can be used to visualize the bump map.
    * This uses the scala doodle package and also opens a window for live visualization.
    */
  def toImg(implicit params: AIB3DParams): Unit = {
    require(params.gp.pattern == "square",
      "Only square bump patterns are supported for visualization")
    // Floating point precision
    def roundToNm(x: Double): String = ((x * 1000).round / 1000.0).toString

    // Iterate row-wise (not in reverse order) and column-wise (in reverse order)
    // Scale by factor of 10 for legibility
    val scale = 10.0
    val unitWidth = scale * params.gp.pitchH
    val unitHeight = scale * params.gp.pitchV
    val bumps =  // 2D recursion
      params.bumpMap.foldLeft(Picture.empty)((below, row) =>
        row.reverse.foldLeft(Picture.empty){(right, b) =>
          val bumpText = Picture.text(b.bumpName).scale(scale / 16, scale / 16)
            .above(
              if (b.coreSig.isDefined)
                Picture.text(b.coreSig.get.fullName).scale(scale / 20, scale / 20)
              else Picture.empty
            )
          // An invisible square with a circle inside
          val bumpCircle = Picture.circle(scale * params.gp.pitch / 2)
          val bumpCell = bumpText.on(bumpCircle.fillColor(b match {
            case _: Pwr => Color.red
            case _: Gnd => Color.gray
            case _: TxSig => Color.lightGreen
            case _: RxSig => Color.lightBlue
            case _ => Color.white
          })).on(Picture.rectangle(unitWidth, unitHeight).noFill.noStroke)
          bumpCell.beside(right)
        }.above(below)
      )

    // Overlay a dotted grid for submodules
    // Unfortunately, can't get bounding box or size of patch because it's a bug in doodle 0.19.0
    // Fixed for 0.20.0 but that is only available for Scala 3
    // So we have to do it manually - get dimensions of bump map and draw grid
    // (Accounts for default strokeWidth = 1)
    val (bumpsH, bumpsV) = (params.bumpMap(0).length, params.bumpMap.length)
    val bumpsWidth = bumpsH * unitWidth
    val bumpsHeight = bumpsV * unitHeight
    val grid =  // 2D recursion
      (0 until params.submodRowsWR).foldLeft(Picture.empty)((below, y) =>
        (0 until params.submodColsWR).foldLeft(Picture.empty)((right, x) =>
          Picture.rectangle(bumpsWidth / params.submodColsWR - 1,
                            bumpsHeight / params.submodRowsWR - 1)
          .strokeColor(Color.gray).strokeDash(Array(scale / 2, scale / 5))
          .beside(right)
        ).above(below)
      )
    // Title
    val titleText = s"""Bump Map: ${bumpsH} x ${bumpsV} bumps at
                        | ${params.gp.pitchH}um x ${params.gp.pitchV}um pitch"""
                        .stripMargin
    val titleBlock = Picture.text(titleText).scale(scale / 5, scale / 5).on(
      Picture.rectangle(bumpsWidth, unitHeight / 2).noFill.noStroke)
    // Rulers
    val leftRulerOffset = if (params.pinSide == "S") params.ip.bumpOffset else 0.0
    val leftRuler =
      (0 until bumpsV).foldLeft(Picture.empty)((below, y) =>
        Picture.text(roundToNm((y + 0.5) * params.gp.pitchV + leftRulerOffset))
        .on(Picture.rectangle(unitWidth, unitHeight).noFill.noStroke)
        .above(below))
      Picture.rectangle(unitWidth / 2, bumpsHeight).noFill.noStroke
    val bottomRulerOffset = if (params.pinSide == "W") params.ip.bumpOffset else 0.0
    val bottomRuler =
      Picture.text("Rulers (um)")
      .on(Picture.rectangle(unitWidth, unitHeight).noFill.noStroke)
      .beside((0 until bumpsH).reverse.foldLeft(Picture.empty)((right, x) =>
        Picture.text(roundToNm((x + 0.5) * params.gp.pitchH + bottomRulerOffset))
        .on(Picture.rectangle(unitWidth, unitHeight).noFill.noStroke)
        .beside(right))
      )
    // Pin placement
    // location is relative to center of bump array
    val pinOffsetX = (params.pinSide match {
      case "W" => -params.ip.bumpOffset * scale
      case "E" => params.ip.bumpOffset * scale
      case _ => 0.0
    }) + unitWidth / 2 - bumpsWidth / 2
    val pinOffsetY = (params.pinSide match {
      case "S" => -params.ip.bumpOffset * scale
      case "N" => params.ip.bumpOffset * scale
      case _ => 0.0
    }) + unitHeight / 2 - bumpsHeight / 2
    val textOffset = scale
    val rotation = params.pinSide match {
      case "N" | "S" => 90.degrees
      case _ => 0.degrees
    }
    val pins = params.flatBumpMap.filter(_.coreSig.isDefined)
      .foldLeft(Picture.empty){ case (on, b) =>
        val coreSig = b.coreSig.get
        val pinSize = params.ip.layerPitch(coreSig.pinLayer.get) / 1000 * scale
        val locX = coreSig.pinLocation.get.x * scale + pinOffsetX
        val locY = coreSig.pinLocation.get.y * scale + pinOffsetY
        val pinText = Picture.text(s"${coreSig.fullName} (${coreSig.pinLayer.get})")
          .scale(scale / 100, scale / 100).rotate(rotation)
        val pinRect = Picture.rectangle(pinSize, pinSize).at(locX, locY)
          .strokeColor(Color.black).strokeWidth(scale / 200)
        (params.pinSide match {
          case "N" => pinText.at(locX, locY + textOffset)
          case "S" => pinText.at(locX, locY - textOffset)
          case "E" => pinText.at(locX + textOffset, locY)
          case "W" => pinText.at(locX - textOffset, locY)
        }).on(pinRect).on(on)
      }

    // Final pic
    val bumpMapPic = titleBlock
                     .above(pins
                       .on(leftRuler
                         .beside(bumps.on(grid))
                       .above(bottomRuler)
                       )
                     )

    // Vector
    bumpMapPic.write[Pdf]("bumpmap.pdf")
    // Scalar
    bumpMapPic.write[Png]("bumpmap.png")
    // Live window (2x2 pixels = 1um^2)
    bumpMapPic.scale(2 / scale, 2 / scale).draw()
  }
}